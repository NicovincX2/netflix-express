#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('netflix-express:server');
var http = require('http');
var models = require('../models');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Vérification de la connection à la database
(async () => {
  try {
      await models.sequelize.authenticate();
      console.log('Connection has been established successfully.');
  } catch (error) {
      console.error('Unable to connect to the database:', error);
  }
})();

// Get JSON files
var json_rated_path = './data/rated_titles.json';
var json_seen_path = './data/seen_titles.json';
const processJSON = require('../populatesqlite').processJSON;

/**
 * Listen on provided port, on all network interfaces.
 */
// models.sequelize.sync().then(function () {
//   server.listen(port, function () {
//     debug('Express server listening on port ' + server.address().port);
//   });
//   server.on('error', onError);
//   server.on('listening', onListening);
// });

(async () => {
  await models.sequelize.sync();
  // Code here
  try {
      const RatedArray = require('../migrate_from_json')(json_rated_path, false);
      const SeenArray = require('../migrate_from_json')(json_seen_path, true);

      await Promise.all([
          processJSON(RatedArray, false),
          processJSON(SeenArray, true),
      ]);
  } catch (err) {
      console.error("Loading Error:", err);
  };

  server.listen(port, () => {
    debug('Express server listening on port ' + server.address().port);
  });
  server.on('error', onError);
  server.on('listening', onListening);
})();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
